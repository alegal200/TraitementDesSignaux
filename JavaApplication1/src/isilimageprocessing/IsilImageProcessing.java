/*
 * TestCImage2.java
 *
 * Created on 10 juillet 2007, 16:50
 */
package isilimageprocessing;

import CImage.*;
import CImage.Exceptions.*;
import CImage.Observers.*;
import CImage.Observers.Events.*;
import ImageProcessing.Complexe.MatriceComplexe;
import ImageProcessing.Contours.ContoursLineaire;
import ImageProcessing.Contours.ContoursNonLineaire;
import static ImageProcessing.Contours.ContoursNonLineaire.*;
import ImageProcessing.Fourier.Fourier;
import ImageProcessing.Histogramme.Histogramme;
import static ImageProcessing.Histogramme.Histogramme.contraste1;
import static ImageProcessing.Histogramme.Histogramme.contraste2;
import static ImageProcessing.Histogramme.Histogramme.creeCourbeTonaleEgalisation;
import static ImageProcessing.Histogramme.Histogramme.creeCourbeTonaleGamma;
import static ImageProcessing.Histogramme.Histogramme.creeCourbeTonaleLineaire;
import static ImageProcessing.Histogramme.Histogramme.creeCourbeTonaleLineaireSaturation;
import static ImageProcessing.Histogramme.Histogramme.creeCourbeTonaleNegatif;
import static ImageProcessing.Histogramme.Histogramme.luminance;
import static ImageProcessing.Histogramme.Histogramme.maximum;
import static ImageProcessing.Histogramme.Histogramme.minimum;
import static ImageProcessing.Histogramme.Histogramme.rehaussement;
import ImageProcessing.Histogramme.Transfo_dialog;
import ImageProcessing.Lineaire.FiltrageLinaireGlobal;
import static ImageProcessing.Lineaire.FiltrageLinaireGlobal.filtrePasseBasButterworth;
import ImageProcessing.Lineaire.FiltrageLineaireLocal;
import ImageProcessing.NonLineaire.* ;
import ImageProcessing.Seuillage.Seuillage;
import isilimageprocessing.Dialogues.*;
import java.awt.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author HP_Propriï¿½taire
 */
public class IsilImageProcessing extends javax.swing.JFrame implements ClicListener, SelectLigneListener, SelectRectListener, SelectRectFillListener, SelectCercleListener, SelectCercleFillListener {

    private CImageRGB imageRGB;
    private CImageNG imageNG;

    private JLabelBeanCImage observer;
    private Color couleurPinceauRGB;
    private int couleurPinceauNG;

    /**
     * Creates new form TestCImage2
     */
    public IsilImageProcessing() {
        initComponents();

        imageRGB = null;
        imageNG = null;

        observer = new JLabelBeanCImage();
        observer.addClicListener(this);
        observer.addSelectLigneListener(this);
        observer.addSelectRectListener(this);
        observer.addSelectRectFillListener(this);
        observer.addSelectCercleListener(this);
        observer.addSelectCercleFillListener(this);
        observer.setMode(JLabelBeanCImage.INACTIF);
        jScrollPane.setViewportView(observer);

        jMenuDessiner.setEnabled(false);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);

        couleurPinceauRGB = Color.BLACK;
        couleurPinceauNG = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupDessiner = new javax.swing.ButtonGroup();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenu12 = new javax.swing.JMenu();
        jMenuItem37 = new javax.swing.JMenuItem();
        jScrollPane = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuImage = new javax.swing.JMenu();
        jMenuNouvelle = new javax.swing.JMenu();
        jMenuItemNouvelleRGB = new javax.swing.JMenuItem();
        jMenuItemNouvelleNG = new javax.swing.JMenuItem();
        jMenuOuvrir = new javax.swing.JMenu();
        jMenuItemOuvrirRGB = new javax.swing.JMenuItem();
        jMenuItemOuvrirNG = new javax.swing.JMenuItem();
        jMenuItemEnregistrerSous = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuQuitter = new javax.swing.JMenuItem();
        jMenuDessiner = new javax.swing.JMenu();
        jMenuItemCouleurPinceau = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jCheckBoxMenuItemDessinerPixel = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerLigne = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectangle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerRectanglePlein = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCercle = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemDessinerCerclePlein = new javax.swing.JCheckBoxMenuItem();
        jMenuFourier = new javax.swing.JMenu();
        jMenuFourierAfficher = new javax.swing.JMenu();
        jMenuItemFourierAfficherModule = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPhase = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieReelle = new javax.swing.JMenuItem();
        jMenuItemFourierAfficherPartieImaginaire = new javax.swing.JMenuItem();
        jMenuHistogramme = new javax.swing.JMenu();
        jMenuHistogrammeAfficher = new javax.swing.JMenuItem();
        jMenuHistogrammeAfficherParam = new javax.swing.JMenuItem();
        jMenuTransfoLineaire = new javax.swing.JMenuItem();
        jMenuTransfoLinSaturation = new javax.swing.JMenuItem();
        jMenuTransfoGamma = new javax.swing.JMenuItem();
        jMenuTransfoNegatif = new javax.swing.JMenuItem();
        jMenuTransfoEgalisation = new javax.swing.JMenuItem();
        jMenuFiltre = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuFiltre1 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem32 = new javax.swing.JMenuItem();
        jMenuFiltre2 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem25 = new javax.swing.JMenuItem();
        jMenuItem26 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItem28 = new javax.swing.JMenuItem();
        jMenuItem29 = new javax.swing.JMenuItem();
        jMenu13 = new javax.swing.JMenu();
        jMenu14 = new javax.swing.JMenu();
        jMenuItem38 = new javax.swing.JMenuItem();
        jMenuItem39 = new javax.swing.JMenuItem();
        jMenu15 = new javax.swing.JMenu();
        jMenuItem33 = new javax.swing.JMenuItem();
        jMenuItem34 = new javax.swing.JMenuItem();
        jMenu16 = new javax.swing.JMenu();
        jMenuItem30 = new javax.swing.JMenuItem();
        jMenuItem31 = new javax.swing.JMenuItem();
        jMenu17 = new javax.swing.JMenu();
        jMenuItem35 = new javax.swing.JMenuItem();
        jMenuItem36 = new javax.swing.JMenuItem();

        jMenuItem7.setText("jMenuItem7");

        jMenu5.setText("jMenu5");

        jMenuItem21.setText("jMenuItem21");

        jMenuItem27.setText("jMenuItem27");

        jMenu12.setText("jMenu12");

        jMenuItem37.setText("jMenuItem37");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TestCImage3");

        jMenuImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Net 13_p1.jpg"))); // NOI18N
        jMenuImage.setText("Image");

        jMenuNouvelle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/File 65_p3.jpg"))); // NOI18N
        jMenuNouvelle.setText("Nouvelle");

        jMenuItemNouvelleRGB.setText("Image RGB");
        jMenuItemNouvelleRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleRGBActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleRGB);

        jMenuItemNouvelleNG.setText("Image NG");
        jMenuItemNouvelleNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNouvelleNGActionPerformed(evt);
            }
        });
        jMenuNouvelle.add(jMenuItemNouvelleNG);

        jMenuImage.add(jMenuNouvelle);

        jMenuOuvrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Folder 036_p3.jpg"))); // NOI18N
        jMenuOuvrir.setText("Ouvrir");

        jMenuItemOuvrirRGB.setText("Image RGB");
        jMenuItemOuvrirRGB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirRGBActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirRGB);

        jMenuItemOuvrirNG.setText("Image NG");
        jMenuItemOuvrirNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOuvrirNGActionPerformed(evt);
            }
        });
        jMenuOuvrir.add(jMenuItemOuvrirNG);

        jMenuImage.add(jMenuOuvrir);

        jMenuItemEnregistrerSous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/DD 27_p3.jpg"))); // NOI18N
        jMenuItemEnregistrerSous.setText("Enregistrer sous...");
        jMenuItemEnregistrerSous.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEnregistrerSousActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuItemEnregistrerSous);
        jMenuImage.add(jSeparator1);

        jMenuQuitter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 59_p3.jpg"))); // NOI18N
        jMenuQuitter.setText("Quitter");
        jMenuQuitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuQuitterActionPerformed(evt);
            }
        });
        jMenuImage.add(jMenuQuitter);

        jMenuBar1.add(jMenuImage);

        jMenuDessiner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 28_p1.jpg"))); // NOI18N
        jMenuDessiner.setText("Dessiner");

        jMenuItemCouleurPinceau.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/Display 14_p3.jpg"))); // NOI18N
        jMenuItemCouleurPinceau.setText("Couleur");
        jMenuItemCouleurPinceau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCouleurPinceauActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jMenuItemCouleurPinceau);
        jMenuDessiner.add(jSeparator2);

        jCheckBoxMenuItemDessinerPixel.setText("Pixel");
        jCheckBoxMenuItemDessinerPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerPixelActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerPixel);

        jCheckBoxMenuItemDessinerLigne.setText("Ligne");
        jCheckBoxMenuItemDessinerLigne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerLigneActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerLigne);

        jCheckBoxMenuItemDessinerRectangle.setText("Rectangle");
        jCheckBoxMenuItemDessinerRectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectangleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectangle);

        jCheckBoxMenuItemDessinerRectanglePlein.setText("Rectangle plein");
        jCheckBoxMenuItemDessinerRectanglePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerRectanglePlein);

        jCheckBoxMenuItemDessinerCercle.setText("Cercle");
        jCheckBoxMenuItemDessinerCercle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCercleActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCercle);

        jCheckBoxMenuItemDessinerCerclePlein.setText("Cercle plein");
        jCheckBoxMenuItemDessinerCerclePlein.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemDessinerCerclePleinActionPerformed(evt);
            }
        });
        jMenuDessiner.add(jCheckBoxMenuItemDessinerCerclePlein);

        jMenuBar1.add(jMenuDessiner);

        jMenuFourier.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p1.jpg"))); // NOI18N
        jMenuFourier.setText("Fourier");

        jMenuFourierAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/CP 51_p3.jpg"))); // NOI18N
        jMenuFourierAfficher.setText("Afficher");

        jMenuItemFourierAfficherModule.setText("Module");
        jMenuItemFourierAfficherModule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherModuleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherModule);

        jMenuItemFourierAfficherPhase.setText("Phase");
        jMenuItemFourierAfficherPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPhaseActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPhase);

        jMenuItemFourierAfficherPartieReelle.setText("Partie Reelle");
        jMenuItemFourierAfficherPartieReelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieReelleActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieReelle);

        jMenuItemFourierAfficherPartieImaginaire.setText("Partie Imaginaire");
        jMenuItemFourierAfficherPartieImaginaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFourierAfficherPartieImaginaireActionPerformed(evt);
            }
        });
        jMenuFourierAfficher.add(jMenuItemFourierAfficherPartieImaginaire);

        jMenuFourier.add(jMenuFourierAfficher);

        jMenuBar1.add(jMenuFourier);

        jMenuHistogramme.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_48_hot.jpg"))); // NOI18N
        jMenuHistogramme.setText("Histogramme");

        jMenuHistogrammeAfficher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icones/report_32_hot.jpg"))); // NOI18N
        jMenuHistogrammeAfficher.setText("Afficher");
        jMenuHistogrammeAfficher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeAfficher);

        jMenuHistogrammeAfficherParam.setText("Afficher ParamÃ¨tres");
        jMenuHistogrammeAfficherParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuHistogrammeAfficherParamActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuHistogrammeAfficherParam);

        jMenuTransfoLineaire.setText("TransfoLineaire");
        jMenuTransfoLineaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTransfoLineaireActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuTransfoLineaire);

        jMenuTransfoLinSaturation.setText("TransfoLineaireSaturation");
        jMenuTransfoLinSaturation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTransfoLinSaturationActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuTransfoLinSaturation);

        jMenuTransfoGamma.setText("TransfoGamma");
        jMenuTransfoGamma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTransfoGammaActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuTransfoGamma);

        jMenuTransfoNegatif.setText("TransfoNegatif");
        jMenuTransfoNegatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTransfoNegatifActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuTransfoNegatif);

        jMenuTransfoEgalisation.setText("TransfoEgalisation");
        jMenuTransfoEgalisation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuTransfoEgalisationActionPerformed(evt);
            }
        });
        jMenuHistogramme.add(jMenuTransfoEgalisation);

        jMenuBar1.add(jMenuHistogramme);

        jMenuFiltre.setText("Filtres");

        jMenu2.setText("LINEAIRE ");

        jMenu1.setText("Global");

        jMenuItem1.setText("Filtre NR fourier PasseHaut");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourierIdealPasseHaut(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Filtre NR fourier Passe bas");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourierIdealPassebas(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Filtre NR PasseBasButterworth");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasseBasButterworth(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Filtre NR PasseHautButterworth");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PassehautButterworth(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenu2.add(jMenu1);

        jMenu3.setText("LOCAL");

        jMenuItem5.setText("moyenneur");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtreMoyenne(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem6.setText("matrice");
        jMenu3.add(jMenuItem6);

        jMenu2.add(jMenu3);

        jMenuFiltre.add(jMenu2);

        jMenuFiltre1.setText("NONLINEAIRE");
        jMenuFiltre1.setActionCommand("");

        jMenuItem8.setText("MEDIAN");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtreMedian(evt);
            }
        });
        jMenuFiltre1.add(jMenuItem8);

        jMenu4.setText("ELEMENTAIRE");

        jMenuItem9.setText("EROSION");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ErosionFiltree(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuItem10.setText("Dilatation");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DilatationFiltre(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuItem11.setText("Ouverture");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OuvertureFiltre(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuItem12.setText("fermeture");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fermetureFiltre(evt);
            }
        });
        jMenu4.add(jMenuItem12);

        jMenuFiltre1.add(jMenu4);

        jMenuItem32.setText("GÃ©oDÃ©sique");
        jMenuItem32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geoDesique(evt);
            }
        });
        jMenuFiltre1.add(jMenuItem32);

        jMenuFiltre.add(jMenuFiltre1);

        jMenuFiltre2.setText("CONTOUR");

        jMenu6.setText("LINEAIRE");

        jMenuItem13.setText("Prewitt");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prewitt(evt);
            }
        });
        jMenu6.add(jMenuItem13);

        jMenuItem14.setText("Sobel");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobel(evt);
            }
        });
        jMenu6.add(jMenuItem14);

        jMenuItem15.setText("laplacien4");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laplacien4(evt);
            }
        });
        jMenu6.add(jMenuItem15);

        jMenuItem16.setText("laplacien8");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laplacien8(evt);
            }
        });
        jMenu6.add(jMenuItem16);

        jMenuFiltre2.add(jMenu6);

        jMenu8.setText("NONLINEAIRE");

        jMenuItem17.setText("GradiantDilatation");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradiantDilatation(evt);
            }
        });
        jMenu8.add(jMenuItem17);

        jMenuItem18.setText("GradiantErosion");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradErosin(evt);
            }
        });
        jMenu8.add(jMenuItem18);

        jMenuItem19.setText("Beucher");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                beucher(evt);
            }
        });
        jMenu8.add(jMenuItem19);

        jMenuItem20.setText("Laplacien non lin");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laplacnonline(evt);
            }
        });
        jMenu8.add(jMenuItem20);

        jMenuFiltre2.add(jMenu8);

        jMenuFiltre.add(jMenuFiltre2);

        jMenu7.setText("seuillage");

        jMenuItem22.setText("SeuillageSimple");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seulsimpl(evt);
            }
        });
        jMenu7.add(jMenuItem22);

        jMenuItem23.setText("seuillageDouble");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seuilldouble(evt);
            }
        });
        jMenu7.add(jMenuItem23);

        jMenuItem24.setText("seuillageAuto");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seuilauto(evt);
            }
        });
        jMenu7.add(jMenuItem24);

        jMenuFiltre.add(jMenu7);

        jMenuBar1.add(jMenuFiltre);
        jMenuFiltre.getAccessibleContext().setAccessibleName("jMenuFiltre");

        jMenu9.setText("Etape 5");

        jMenu10.setText("1) Lenabruit");

        jMenuItem25.setText("LenaLineaire");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Lena1Line(evt);
            }
        });
        jMenu10.add(jMenuItem25);

        jMenuItem26.setText("LenaNonLin");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LenaNonLin(evt);
            }
        });
        jMenu10.add(jMenuItem26);

        jMenu9.add(jMenu10);

        jMenu11.setText("2)LenaAEgal");

        jMenuItem28.setText("3courb tonal");
        jMenuItem28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeanAEgal1(evt);
            }
        });
        jMenu11.add(jMenuItem28);

        jMenuItem29.setText("courbetonalenr");
        jMenuItem29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LenaAegalCourbetonal1(evt);
            }
        });
        jMenu11.add(jMenuItem29);

        jMenu9.add(jMenu11);

        jMenu13.setText("3) RIEN");
        jMenu9.add(jMenu13);

        jMenu14.setText("4) petits poids");

        jMenuItem38.setText("bleus");
        jMenuItem38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem38ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem38);

        jMenuItem39.setText("rouge");
        jMenuItem39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem39ActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItem39);

        jMenu9.add(jMenu14);

        jMenu15.setLabel("5)  Balanes");

        jMenuItem33.setLabel("balane");
        jMenuItem33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem33ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem33);

        jMenuItem34.setLabel("petits");
        jMenuItem34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem34ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem34);

        jMenu9.add(jMenu15);

        jMenu16.setText("6) tools");

        jMenuItem30.setText("version1");
        jMenuItem30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toolsv1(evt);
            }
        });
        jMenu16.add(jMenuItem30);

        jMenuItem31.setText("jMenuItem31");
        jMenu16.add(jMenuItem31);

        jMenu9.add(jMenu16);

        jMenu17.setText("7) vaisseau");

        jMenuItem35.setText("plantte");
        jMenuItem35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem35ActionPerformed(evt);
            }
        });
        jMenu17.add(jMenuItem35);

        jMenuItem36.setText("contour rouge");
        jMenuItem36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem36ActionPerformed(evt);
            }
        });
        jMenu17.add(jMenuItem36);

        jMenu9.add(jMenu17);

        jMenuBar1.add(jMenu9);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(580, 400));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuHistogrammeAfficherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherActionPerformed
        int histo[];
        try {
            int f_int[][] = imageNG.getMatrice();
            histo = Histogramme.Histogramme256(f_int);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
            return;
        }

        // Crï¿½ation du dataset
        XYSeries serie = new XYSeries("Histo");
        for (int i = 0; i < 256; i++) {
            serie.add(i, histo[i]);
        }
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(serie);

        // Creation du chart
        JFreeChart chart = ChartFactory.createHistogram("Histogramme", "Niveaux de gris", "Nombre de pixels", dataset, PlotOrientation.VERTICAL, false, false, false);

        XYPlot plot = (XYPlot) chart.getXYPlot();
        ValueAxis axeX = plot.getDomainAxis();
        axeX.setRange(0, 255);
        plot.setDomainAxis(axeX);

        // creation d'une frame
        ChartFrame frame = new ChartFrame("Histogramme de l'image", chart);
        frame.pack();
        frame.setVisible(true);


    }//GEN-LAST:event_jMenuHistogrammeAfficherActionPerformed

    private void activeMenusNG() {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(true);
        jMenuHistogramme.setEnabled(true);
    }

    private void activeMenusRGB() {
        jMenuDessiner.setEnabled(true);
        jMenuFourier.setEnabled(false);
        jMenuHistogramme.setEnabled(false);
    }

    private void jCheckBoxMenuItemDessinerCerclePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerCerclePlein.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(true);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCerclePleinActionPerformed

    private void jCheckBoxMenuItemDessinerCercleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerCercleActionPerformed
        if (!jCheckBoxMenuItemDessinerCercle.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(true);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_CERCLE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerCercleActionPerformed

    private void jMenuItemFourierAfficherPartieImaginaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieImaginaire[][] = fourier.getPartieImaginaire();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, partieImaginaire, "Fourier : Affichage de la partie imaginaire");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherPartieImaginaireActionPerformed

    private void jMenuItemFourierAfficherPartieReelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPartieReelleActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double partieReelle[][] = fourier.getPartieReelle();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, partieReelle, "Fourier : Affichage de la partie reelle");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPartieReelleActionPerformed

    private void jMenuItemFourierAfficherPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherPhaseActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double phase[][] = fourier.getPhase();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, phase, "Fourier : Affichage de la phase");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_jMenuItemFourierAfficherPhaseActionPerformed

    private void jMenuItemFourierAfficherModuleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFourierAfficherModuleActionPerformed
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            System.out.println("Debut Fourier");
            MatriceComplexe fourier = Fourier.Fourier2D(f);
            System.out.println("Fin Fourier");
            fourier = Fourier.decroise(fourier);
            double module[][] = fourier.getModule();

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, module, "Fourier : Affichage du module");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_jMenuItemFourierAfficherModuleActionPerformed

    private void jCheckBoxMenuItemDessinerPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerPixelActionPerformed
        if (!jCheckBoxMenuItemDessinerPixel.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(true);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.CLIC);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerPixelActionPerformed

    private void jMenuItemEnregistrerSousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEnregistrerSousActionPerformed
        JFileChooser choix = new JFileChooser();
        File fichier;

        choix.setCurrentDirectory(new File("."));
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    if (imageRGB != null) {
                        imageRGB.enregistreFormatPNG(fichier);
                    }
                    if (imageNG != null) {
                        imageNG.enregistreFormatPNG(fichier);
                    }
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemEnregistrerSousActionPerformed

    private void jMenuItemOuvrirNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirNGActionPerformed
        JFileChooser choix = new JFileChooser();
        File fichier;

        choix.setCurrentDirectory(new File("."));
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    imageNG = new CImageNG(fichier);
                    observer.setCImage(imageNG);
                    imageRGB = null;
                    activeMenusNG();
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemOuvrirNGActionPerformed

    private void jMenuItemNouvelleNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleNGActionPerformed
        JDialogNouvelleCImageNG dialog = new JDialogNouvelleCImageNG(this, true);
        dialog.setVisible(true);
        imageNG = dialog.getCImageNG();
        observer.setCImage(imageNG);
        imageRGB = null;
        activeMenusNG();
    }//GEN-LAST:event_jMenuItemNouvelleNGActionPerformed

    private void jMenuItemCouleurPinceauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCouleurPinceauActionPerformed
        if (imageRGB != null) {
            Color newC = JColorChooser.showDialog(this, "Couleur du pinceau", couleurPinceauRGB);
            if (newC != null) {
                couleurPinceauRGB = newC;
            }
            observer.setCouleurPinceau(couleurPinceauRGB);
        }

        if (imageNG != null) {
            JDialogChoixCouleurNG dialog = new JDialogChoixCouleurNG(this, true, couleurPinceauNG);
            dialog.setVisible(true);
            couleurPinceauNG = dialog.getCouleur();
        }
    }//GEN-LAST:event_jMenuItemCouleurPinceauActionPerformed

    private void jCheckBoxMenuItemDessinerRectanglePleinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed
        if (!jCheckBoxMenuItemDessinerRectanglePlein.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(true);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT_FILL);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectanglePleinActionPerformed

    private void jCheckBoxMenuItemDessinerRectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed
        if (!jCheckBoxMenuItemDessinerRectangle.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(false);
            jCheckBoxMenuItemDessinerRectangle.setSelected(true);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_RECT);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerRectangleActionPerformed

    private void jCheckBoxMenuItemDessinerLigneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemDessinerLigneActionPerformed
        if (!jCheckBoxMenuItemDessinerLigne.isSelected())
            observer.setMode(JLabelBeanCImage.INACTIF);
        else {
            jCheckBoxMenuItemDessinerPixel.setSelected(false);
            jCheckBoxMenuItemDessinerLigne.setSelected(true);
            jCheckBoxMenuItemDessinerRectangle.setSelected(false);
            jCheckBoxMenuItemDessinerRectanglePlein.setSelected(false);
            jCheckBoxMenuItemDessinerCercle.setSelected(false);
            jCheckBoxMenuItemDessinerCerclePlein.setSelected(false);
            observer.setMode(JLabelBeanCImage.SELECT_LIGNE);
        }
    }//GEN-LAST:event_jCheckBoxMenuItemDessinerLigneActionPerformed

    private void jMenuItemNouvelleRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNouvelleRGBActionPerformed
        JDialogNouvelleCImageRGB dialog = new JDialogNouvelleCImageRGB(this, true);
        dialog.setVisible(true);
        imageRGB = dialog.getCImageRGB();
        observer.setCImage(imageRGB);
        imageNG = null;
        activeMenusRGB();
    }//GEN-LAST:event_jMenuItemNouvelleRGBActionPerformed

    private void jMenuQuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuQuitterActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuQuitterActionPerformed

    private void jMenuItemOuvrirRGBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOuvrirRGBActionPerformed
        JFileChooser choix = new JFileChooser();
        File fichier;

        choix.setCurrentDirectory(new File("."));
        if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            fichier = choix.getSelectedFile();
            if (fichier != null) {
                try {
                    imageRGB = new CImageRGB(fichier);
                    observer.setCImage(imageRGB);
                    imageNG = null;
                    activeMenusRGB();
                } catch (IOException ex) {
                    System.err.println("Erreur I/O : " + ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_jMenuItemOuvrirRGBActionPerformed

    private void PassehautButterworth(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PassehautButterworth
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            System.out.println("Debut PasseBasButterworth");

            int val = Integer.parseInt(JOptionPane.showInputDialog("valeur de la frequence de coupure ! int"));
            int valOrdre = Integer.parseInt(JOptionPane.showInputDialog("valeur de l ordre! int"));
            f_int = FiltrageLinaireGlobal.filtrePasseHautButterworth(f_int, val, valOrdre);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Fourier : Affichage du module");
            dialog.setVisible(true);
            System.out.println("Fin PasseBasButterworth");
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_PassehautButterworth

    private void PasseBasButterworth(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasseBasButterworth
        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            System.out.println("Debut PasseBasButterworth");

            int val = Integer.parseInt(JOptionPane.showInputDialog("valeur de la frequence de coupure ! int"));
            int valOrdre = Integer.parseInt(JOptionPane.showInputDialog("valeur de l ordre! int"));
            f_int = FiltrageLinaireGlobal.filtrePasseBasButterworth(f_int, val, valOrdre);

            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Fourier : Affichage du module");
            dialog.setVisible(true);
            System.out.println("Fin PasseBasButterworth");
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_PasseBasButterworth

    private void fourierIdealPassebas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourierIdealPassebas

        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            System.out.println("Debut Fourier ideal passe bas");

            int val = Integer.parseInt(JOptionPane.showInputDialog("valeur de la frequence de coupure ! int"));
            f_int = FiltrageLinaireGlobal.filtrePasseBasIdeal(f_int, val);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }

            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Fourier : Affichage du module");
            dialog.setVisible(true);
            System.out.println("Fin Fourier ideal passe bas");
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_fourierIdealPassebas

    private void fourierIdealPasseHaut(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourierIdealPasseHaut

        try {
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            System.out.println("Debut Fourier ideal passe bas");

            int val = Integer.parseInt(JOptionPane.showInputDialog("valeur de la frequence de coupure ! int"));
            f_int = FiltrageLinaireGlobal.filtrePasseHautIdeal(f_int, val);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("Fin Fourier ideal passe bas");
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Fourier : Affichage du module");
            dialog.setVisible(true);
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_fourierIdealPasseHaut

    private void filtreMoyenne(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtreMoyenne
        try {
            int val = Integer.parseInt(JOptionPane.showInputDialog("valeur de la taille de la matrice ( impaire )"));
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            f_int = FiltrageLineaireLocal.filtreMoyenneur(f_int, val);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtreMoyenneur fini ");
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre moyenneur ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }


    }//GEN-LAST:event_filtreMoyenne

    private void filtreMedian(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtreMedian
        try {
            int val = Integer.parseInt(JOptionPane.showInputDialog("valeur de la taille de la matrice ( impaire )"));
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            f_int = MorphoComplexe.filtreMedian(f_int, val);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre mediant fini ");
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre mÃ©diant ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }


    }//GEN-LAST:event_filtreMedian

    private void ErosionFiltree(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErosionFiltree

        try {
            int val = Integer.parseInt(JOptionPane.showInputDialog("valeur de la taille de la matrice ( impaire )"));
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            f_int = MorphoElementaire.erosion(f_int, val);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre erosion ");
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre erosion ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }


    }//GEN-LAST:event_ErosionFiltree

    private void DilatationFiltre(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DilatationFiltre
        try {
            int val = Integer.parseInt(JOptionPane.showInputDialog("valeur de la taille de la matrice ( impaire )"));
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            f_int = MorphoElementaire.dilatation(f_int, val);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre dilatation ");
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre dilatation ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_DilatationFiltre

    private void OuvertureFiltre(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OuvertureFiltre
        try {
            int val = Integer.parseInt(JOptionPane.showInputDialog("valeur de la taille de la matrice ( impaire )"));
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            f_int = MorphoElementaire.ouverture(f_int, val);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre ouverture");
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre ouverture ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_OuvertureFiltre

    private void fermetureFiltre(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fermetureFiltre
        try {
            int val = Integer.parseInt(JOptionPane.showInputDialog("valeur de la taille de la matrice ( impaire )"));
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            f_int = MorphoElementaire.fermeture(f_int, val);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre fermeture");
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre fermeture ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }

    }//GEN-LAST:event_fermetureFiltre

    private void jMenuHistogrammeAfficherParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuHistogrammeAfficherParamActionPerformed
    // afficher paramÃ¨tre 
        try {
            int f_int[][] = imageNG.getMatrice();
            System.out.println("Maximum : "+maximum(f_int));
            System.out.println("Minimum : "+minimum(f_int));
            System.out.println("Luminance : "+luminance(f_int));
            System.out.println("Contraste ecart-type : "+contraste1(f_int));
            System.out.println("Contraste min-max : "+contraste2(f_int));
            JOptionPane.showInputDialog("Maximum : "+maximum(f_int)+
                                        System.getProperty("line.separator") + " Minimum :"+minimum(f_int)+
                                        System.getProperty("line.separator") + "Luminance : "+luminance(f_int) +
                                        System.getProperty("line.separator") + "Contraste ecart-type : "+contraste1(f_int) +
                                        System.getProperty("line.separator") + "Contraste min-max : "+contraste2(f_int) 
                    ) ;
            
        } catch (CImageNGException ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
            return;
        }


    }//GEN-LAST:event_jMenuHistogrammeAfficherParamActionPerformed

    private void jMenuTransfoLinSaturationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTransfoLinSaturationActionPerformed
        int[][] imageRehaussed = null;
        try {
            int f_int[][] = imageNG.getMatrice();
            int[]courbeTonale = creeCourbeTonaleLineaireSaturation(85,180);
            imageRehaussed = rehaussement(f_int,courbeTonale);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Transfo_dialog linearRehaus = new Transfo_dialog(this,false,imageRehaussed);
        linearRehaus.setVisible(true);
    }//GEN-LAST:event_jMenuTransfoLinSaturationActionPerformed

    private void jMenuTransfoLineaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTransfoLineaireActionPerformed
        
        int[][] imageRehaussed = null;
        try {
            int f_int[][] = imageNG.getMatrice();
            int[]courbeTonale = creeCourbeTonaleLineaire();
            imageRehaussed = rehaussement(f_int,courbeTonale);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Transfo_dialog linearRehaus = new Transfo_dialog(this,false,imageRehaussed);
        linearRehaus.setVisible(true);
        
        
    }//GEN-LAST:event_jMenuTransfoLineaireActionPerformed

    private void jMenuTransfoGammaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTransfoGammaActionPerformed
        int[][] imageRehaussed = null;
        try {
            int f_int[][] = imageNG.getMatrice();
            int[]courbeTonale = creeCourbeTonaleGamma(2); //Gamma=2 le test
            imageRehaussed = rehaussement(f_int,courbeTonale);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Transfo_dialog linearRehaus = new Transfo_dialog(this,false,imageRehaussed);
        linearRehaus.setVisible(true);
    }//GEN-LAST:event_jMenuTransfoGammaActionPerformed

    private void jMenuTransfoNegatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTransfoNegatifActionPerformed
        int[][] imageRehaussed = null;
        try {
            int f_int[][] = imageNG.getMatrice();
            int[]courbeTonale = creeCourbeTonaleNegatif(); //Gamma=2 le test
            imageRehaussed = rehaussement(f_int,courbeTonale);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Transfo_dialog linearRehaus = new Transfo_dialog(this,false,imageRehaussed);
        linearRehaus.setVisible(true);
    }//GEN-LAST:event_jMenuTransfoNegatifActionPerformed

    private void jMenuTransfoEgalisationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuTransfoEgalisationActionPerformed
        int[][] imageRehaussed = null;
        try {
            int f_int[][] = imageNG.getMatrice();
            int[]courbeTonale = creeCourbeTonaleEgalisation(f_int);
            imageRehaussed = rehaussement(f_int,courbeTonale);
        } catch (CImageNGException ex) {
            Logger.getLogger(IsilImageProcessing.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Transfo_dialog linearRehaus = new Transfo_dialog(this,false,imageRehaussed);
        linearRehaus.setVisible(true);
    }//GEN-LAST:event_jMenuTransfoEgalisationActionPerformed

    private void prewitt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prewitt
        
         try {
             // get hor / vert 
            int val = Integer.parseInt(JOptionPane.showInputDialog("filtre horizontale (1) ou verticale (2)  "));
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = ContoursLineaire.gradientPrewitt(f_int, val);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre prewitt");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre prewitt ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
  
        
    }//GEN-LAST:event_prewitt

    private void sobel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobel
          try {
             // get hor / vert 
            int val = Integer.parseInt(JOptionPane.showInputDialog("filtre horizontale (1) ou verticale (2)  "));
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = ContoursLineaire.gradientSobel(f_int, val);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre sobel");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre sobel ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
  
    }//GEN-LAST:event_sobel

    private void laplacien4(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laplacien4
        try {
            
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = ContoursLineaire.laplacien4 (f_int);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre laplacien4 ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre laplacien4 ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
        
    }//GEN-LAST:event_laplacien4

    private void laplacien8(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laplacien8
         try {
            
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = ContoursLineaire.laplacien8(f_int);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre laplacien8 ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre laplacien8 ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_laplacien8

    private void gradiantDilatation(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradiantDilatation
        
         try {
            
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = ContoursNonLineaire.gradientDilatation(f_int);
                    
                    
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre gradiantDilatation ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre gradiantDilatation ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
           
        
        
        
    }//GEN-LAST:event_gradiantDilatation

    private void gradErosin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradErosin
          try {
            
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = ContoursNonLineaire.gradientErosion(f_int);
                    
                    
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre gradErosion ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre gradErosion ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
           
        
    }//GEN-LAST:event_gradErosin

    private void beucher(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_beucher
          try {
            
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = ContoursNonLineaire.gradientBeucher(f_int);
                            
                   
                    
                    
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre gradiantBeucher ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre Beucher ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
           
        
    }//GEN-LAST:event_beucher

    private void laplacnonline(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laplacnonline
          try {
            
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = ContoursNonLineaire.laplacienNonLineaire(f_int);
                    
                    
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("filtre laplacnonline ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "Filtre laplacnonline ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
           
        
    }//GEN-LAST:event_laplacnonline

    private void seulsimpl(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seulsimpl
        try {
             // get hor / vert 
            int val = Integer.parseInt(JOptionPane.showInputDialog("val seuillage   "));
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = Seuillage.seuillageSimple(f_int, val) ;
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("seuillage simple ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "seuillage simple ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_seulsimpl

    private void seuilldouble(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seuilldouble
        try {
             // get hor / vert 
            int val = Integer.parseInt(JOptionPane.showInputDialog("val seuillage 1   "));
            int val2 = Integer.parseInt(JOptionPane.showInputDialog("val seuillage 2  "));
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = Seuillage.seuillageDouble(f_int, val , val2) ;
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("seuillage double ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "seuillage double ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
    }//GEN-LAST:event_seuilldouble

    private void seuilauto(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seuilauto
        
         try {
             
            
             // get img 
            int f_int[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = Seuillage.seuillageAutomatique(f_int);
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("seuillage auto ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "seuillage auto ");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
        
        
        
        
        
        
    }//GEN-LAST:event_seuilauto

    private void Lena1Line(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Lena1Line
          try {
             
            
             // get img 
           
            int f_int_r[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_g[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_b[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            imageRGB.getMatricesRGB(f_int_r, f_int_g, f_int_b);
             // process 
            f_int_r =filtrePasseBasButterworth(f_int_r ,40,2);
            f_int_g = filtrePasseBasButterworth(f_int_g, 40,2 ) ; 
            f_int_b = filtrePasseBasButterworth(f_int_b, 40,2 ) ;
            System.out.println("Lena lineaire");
            // display 
            observer.setCImage(new CImageRGB(f_int_r,f_int_g,f_int_b));
         /*   JDialogAfficheMatriceDouble dialogr = new JDialogAfficheMatriceDouble(this, true, fr, "Lena ");
            JDialogAfficheMatriceDouble dialogg = new JDialogAfficheMatriceDouble(this, true, fg, "Lena ");
            JDialogAfficheMatriceDouble dialogb = new JDialogAfficheMatriceDouble(this, true, fb, "Lena ");
            dialogr.setVisible(true);
            dialogg.setVisible(true);
            dialogb.setVisible(true);*/

        } catch (Exception ex) {
            System.out.println("Erreur CImageRGB : " + ex.getMessage());
        }
    }//GEN-LAST:event_Lena1Line

    private void LenaNonLin(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LenaNonLin
        try {
             
            
             // get img 
           
            int f_int_r[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_g[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_b[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            imageRGB.getMatricesRGB(f_int_r, f_int_g, f_int_b);
            
             // process 
            f_int_r = MorphoElementaire.ouverture(  MorphoElementaire.fermeture (f_int_r,3),3);
            f_int_g = MorphoElementaire.ouverture( MorphoElementaire.fermeture(f_int_g,3),3);
            f_int_b = MorphoElementaire.ouverture( MorphoElementaire.fermeture(f_int_b,3),3);
            System.out.println("Lena non-lineaire");
            // display 
            observer.setCImage(new CImageRGB(f_int_r,f_int_g,f_int_b));
         

        } catch (Exception ex) {
            System.out.println("Erreur CImageRGB : " + ex.getMessage());
        }
    }//GEN-LAST:event_LenaNonLin

    private void LeanAEgal1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeanAEgal1
        
        try {
             
            
             // get img 
           
            int f_int_r[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_g[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_b[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            imageRGB.getMatricesRGB(f_int_r, f_int_g, f_int_b);
            
            int[]courbeTonaler = creeCourbeTonaleEgalisation(f_int_r);
            int[]courbeTonaleg = creeCourbeTonaleEgalisation(f_int_g);
            int[]courbeTonaleb = creeCourbeTonaleEgalisation(f_int_b);
             // process 
            f_int_r = rehaussement(f_int_r,courbeTonaler);
            f_int_g = rehaussement(f_int_g,courbeTonaleg);
            f_int_b = rehaussement(f_int_b,courbeTonaleb);
            System.out.println("Lena non-lineaire");
            // display 
            observer.setCImage(new CImageRGB(f_int_r,f_int_g,f_int_b));
         

        } catch (Exception ex) {
            System.out.println("Erreur CImageRGB : " + ex.getMessage());
        }
        
        
    }//GEN-LAST:event_LeanAEgal1

    private void LenaAegalCourbetonal1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LenaAegalCourbetonal1
         try {
             
            
             // get img 
           
            int f_int_r[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_g[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_b[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            imageRGB.getMatricesRGB(f_int_r, f_int_g, f_int_b);
            int f_int[][] = imageRGB.getCImageNG().getMatrice();
            int[]courbeTonale = creeCourbeTonaleEgalisation(f_int);
            
             // process 
            f_int_r = rehaussement(f_int_r,courbeTonale);
            f_int_g = rehaussement(f_int_g,courbeTonale);
            f_int_b = rehaussement(f_int_b,courbeTonale);
            System.out.println("Lena non-lineaire");
            // display 
            observer.setCImage(new CImageRGB(f_int_r,f_int_g,f_int_b));
         

        } catch (Exception ex) {
            System.out.println("Erreur CImageRGB : " + ex.getMessage());
        }
        
        
        
    }//GEN-LAST:event_LenaAegalCourbetonal1

    private void toolsv1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toolsv1
        //segmentation, Ã©rosion, dilatation, ouverture, fermeture
        
        // suprimer les taches blanches -> fermerture  -> fond //50
        // 
        
        // soustraction img fond 
        //segmentation 25
        
         try {
            
             // get img 
            int f_int[][] = imageNG.getMatrice();
            int f_int_ini [][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
            f_int = MorphoElementaire.fermeture(f_int,25);       
                    
            f_int = multimg(f_int_ini,f_int,-1.0);
                    
            f_int = Seuillage.seuillageSimple(f_int, 25);
            
            
            
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("traitement tools");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "tools traitemnts");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
        
    }//GEN-LAST:event_toolsv1

    private void geoDesique(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geoDesique

      // appel interface graph gÃ©odÃ©sique avec image 
      try{
        int f_int[][] = imageNG.getMatrice();
        double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
      
        JDialogAfficheMatriceGeoD dialog = new JDialogAfficheMatriceGeoD(this, true, f, "Dialogue GÃ©odÃ©sique");
            dialog.setVisible(true);
      }catch(Exception e){
          System.out.println("erreur"+e);
      }
    }//GEN-LAST:event_geoDesique

    private void jMenuItem33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem33ActionPerformed
        
            try {
            
             // get img 
            int f_int[][] = imageNG.getMatrice();
            int f_int_i[][] = imageNG.getMatrice();
            int f_int_i2[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
          
            f_int = Seuillage.seuillageSimple(f_int, 190) ;
            f_int =  MorphoElementaire.dilatation(f_int, 9);
            f_int =  MorphoElementaire.erosion(f_int, 33);
            //f_int =  MorphoElementaire.erosion(f_int, 5);
            
             f_int_i = Seuillage.seuillageSimple(f_int_i, 190) ;
             f_int_i = MorphoElementaire.dilatation(f_int_i, 7);
             
             f_int = MorphoComplexe.reconstructionGeodesique(f_int, f_int_i); 
             //f_int = MorphoElementaire.dilatation(f_int, 9);        
             f_int = ContoursNonLineaire.black(f_int_i2, f_int);
             
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("traitement balanes ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "tools traitemnts");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
        
        
        
        
    }//GEN-LAST:event_jMenuItem33ActionPerformed

    private void jMenuItem34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem34ActionPerformed
        
         try {
            
             // get img 
            int f_int[][] = imageNG.getMatrice();
            int f_int_i[][] = imageNG.getMatrice();
            int f_int_i2[][] = imageNG.getMatrice();
            double f[][] = new double[imageNG.getLargeur()][imageNG.getHauteur()];
             // process 
          
            f_int = Seuillage.seuillageSimple(f_int, 190) ;
            f_int =  MorphoElementaire.dilatation(f_int, 9);
            f_int =  MorphoElementaire.erosion(f_int, 33);
            
             f_int_i = Seuillage.seuillageSimple(f_int_i, 190) ;
             f_int_i = MorphoElementaire.dilatation(f_int_i, 7);
             
             f_int = MorphoComplexe.reconstructionGeodesique(f_int, f_int_i); 
             f_int = MorphoElementaire.dilatation(f_int, 7);      
             
             int[]courbeTonale = creeCourbeTonaleNegatif(); //Gamma=2 le test
             f_int = rehaussement(f_int,courbeTonale);
             f_int = ContoursNonLineaire.black(f_int_i2, f_int);
             
             //f_int = MorphoComplexe.reconstructionGeodesique(  , 
             
            for (int i = 0; i < imageNG.getLargeur(); i++) {
                for (int j = 0; j < imageNG.getHauteur(); j++) {
                    f[i][j] = (double) (f_int[i][j]);
                }
            }
            System.out.println("traitement balanes ");
            // display 
            JDialogAfficheMatriceDouble dialog = new JDialogAfficheMatriceDouble(this, true, f, "tools traitemnts");
            dialog.setVisible(true);

        } catch (Exception ex) {
            System.out.println("Erreur CImageNG : " + ex.getMessage());
        }
        
         
        
    }//GEN-LAST:event_jMenuItem34ActionPerformed

    private void jMenuItem35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem35ActionPerformed
        
        // ouvrir vaisseaux 
        // geo vaisseax
        // plannette 
        
        
        
        
        try{
            int f_int[][] = imageNG.getMatrice();
            int f_int_i2[][] = imageNG.getMatrice();
            
      
             // process 
            JFileChooser choix = new JFileChooser();
            File fichier;
            CImageNG imgGeo = null; 
            CImageRGB imgFinal = null; 

            choix.setCurrentDirectory(new File("."));
            if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                fichier = choix.getSelectedFile();
                if (fichier != null) {                    
                       imgGeo = new CImageNG(fichier);
                }
            }
             
             
            f_int = Seuillage.seuillageSimple(f_int, 50) ;
            f_int =  MorphoElementaire.dilatation(f_int, 7);
            f_int = MorphoComplexe.reconstructionGeodesique( imgGeo.getMatrice(), f_int );
            f_int = ContoursNonLineaire.black(f_int_i2, f_int);
            
            choix.setCurrentDirectory(new File("."));
            if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                fichier = choix.getSelectedFile();
                if (fichier != null) {                    
                       imgFinal = new CImageRGB(fichier);
                }
            }
            int [] [] f_int_r = new int[f_int.length][f_int[0].length] ;
            int [] [] f_int_g =new int[f_int.length][f_int[0].length] ;
            int [] []  f_int_b =new int[f_int.length][f_int[0].length] ;
            
            imgFinal.getMatricesRGB(f_int_r, f_int_g, f_int_b);
            
            for (int i = 0; i < f_int_r.length; i++) {
                for (int j = 0; j < f_int_r[0].length; j++) {
                   if(f_int[i][j] != 0  ){
                        f_int_r[i][j]  = f_int[i][j] ;
                        f_int_g[i][j]  = f_int[i][j] ;
                        f_int_b[i][j] = f_int[i][j] ;
                   }
                }
            }
            
            
            observer.setCImage(new CImageRGB(f_int_r,f_int_g,f_int_b ) );
                
           
            System.out.println("traitement vaiseaux ");
        }catch(Exception e){
            System.out.println("err"+e);
        }
        
        
        
        
        
    }//GEN-LAST:event_jMenuItem35ActionPerformed

    private void jMenuItem36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem36ActionPerformed
        
          // ouvrir vaisseaux 
        // geo vaisseax
        // plannette 
        
        
        
        
        try{
            int f_int[][] = imageNG.getMatrice();
            int f_int_rrr[][] = imageNG.getMatrice();
            int f_int_i2[][] = imageNG.getMatrice();
            
      
             // process 
            JFileChooser choix = new JFileChooser();
            File fichier;
            CImageNG imgGeo = null; 
            CImageRGB imgFinal = null; 

            choix.setCurrentDirectory(new File("."));
            if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                fichier = choix.getSelectedFile();
                if (fichier != null) {                    
                       imgGeo = new CImageNG(fichier);
                }
            }
             
             
            f_int = Seuillage.seuillageSimple(f_int, 50) ;
            f_int =  MorphoElementaire.dilatation(f_int, 7 );
            f_int = MorphoComplexe.reconstructionGeodesique( imgGeo.getMatrice(), f_int );
            f_int = ContoursNonLineaire.black(f_int_i2, f_int);
            f_int_rrr = Seuillage.seuillageSimple(f_int, 50) ;
            f_int_rrr = MorphoElementaire.dilatation(f_int_rrr, 7);
            
            choix.setCurrentDirectory(new File("."));
            if (choix.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                fichier = choix.getSelectedFile();
                if (fichier != null) {                    
                       imgFinal = new CImageRGB(fichier);
                }
            }
            int [] [] f_int_r = new int[f_int.length][f_int[0].length] ;
            int [] [] f_int_g =new int[f_int.length][f_int[0].length] ;
            int [] []  f_int_b =new int[f_int.length][f_int[0].length] ;
            
            imgFinal.getMatricesRGB(f_int_r, f_int_g, f_int_b);
            
            for (int i = 0; i < f_int_r.length; i++) {
                for (int j = 0; j < f_int_r[0].length; j++) {
                   if(f_int_rrr[i][j] != 0 )
                       f_int_r[i][j] = 255 ;
                   if(f_int[i][j] != 0  ){
                        
                        f_int_r[i][j]  = f_int[i][j] ;
                        f_int_g[i][j]  = f_int[i][j] ;
                        f_int_b[i][j] = f_int[i][j] ;
                   }
                }
            }
            
            
            observer.setCImage(new CImageRGB(f_int_r,f_int_g,f_int_b ) );
                
           
            System.out.println("traitement vaiseaux ");
        }catch(Exception e){
            System.out.println("err"+e);
        }
        
        
        
        
    }//GEN-LAST:event_jMenuItem36ActionPerformed

    private void jMenuItem38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem38ActionPerformed
        
        try{
         
            int f_int [][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            
            int f_int_r[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_g[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_b[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_b_i[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            
            imageRGB.getMatricesRGB(f_int_r, f_int_g, f_int_b);
            
            int[]courbeTonale = creeCourbeTonaleNegatif(); //Gamma=2 le test

          
           f_int_b = multimg(f_int_b,f_int_r,-1.0);
           f_int_b = multimg(f_int_b,f_int_g,-1.0);
           f_int_b_i = f_int_b ;
           f_int_b = rehaussement(f_int_b,courbeTonale);
           f_int_b = MorphoElementaire.dilatation(f_int_b, 25);
           f_int_b = rehaussement(f_int_b,courbeTonale);

           f_int_b = MorphoComplexe.reconstructionGeodesique(f_int_b,f_int_b_i);
           f_int_b = rehaussement(f_int_b,courbeTonale);
           
            observer.setCImage(new CImageRGB(f_int_b,f_int_b,f_int_b));
        }catch(Exception e){
            
        } 
        
        
        
        
        
        
    }//GEN-LAST:event_jMenuItem38ActionPerformed

    private void jMenuItem39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem39ActionPerformed
        
        try{
         
            int f_int [][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            
            int f_int_r[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_g[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_b[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            int f_int_r_i[][] = new int[imageRGB.getLargeur()] [imageRGB.getHauteur()];
            
            imageRGB.getMatricesRGB(f_int_r, f_int_g, f_int_b);
            
            int[]courbeTonale = creeCourbeTonaleNegatif(); //Gamma=2 le test

          
           f_int_r = multimg(f_int_r,f_int_b,-1.0);
           f_int_r = multimg(f_int_r,f_int_g,-1.0);
           f_int_r_i = f_int_r ;
           f_int_r = rehaussement(f_int_r,courbeTonale);
           f_int_r = MorphoElementaire.dilatation(f_int_r, 25);
           f_int_r = rehaussement(f_int_r,courbeTonale);

           f_int_r = MorphoComplexe.reconstructionGeodesique(f_int_r,f_int_r_i);
           f_int_r = rehaussement(f_int_r,courbeTonale);
           
            observer.setCImage(new CImageRGB(f_int_r,f_int_r,f_int_r));
        }catch(Exception e){
            
        } 
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jMenuItem39ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IsilImageProcessing().setVisible(true);
            }
        });
    }

    public void ClicDetected(UnClicEvent e) {
        if (jCheckBoxMenuItemDessinerPixel.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.setPixel(e.getX(), e.getY(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.setPixel(e.getX(), e.getY(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectLigneDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerLigne.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.DessineLigne(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.DessineLigne(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectRectDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerRectangle.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.DessineRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.DessineRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectCercleDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerCercle.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.DessineCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.DessineCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectCercleFillDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerCerclePlein.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.RemplitCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.RemplitCercle(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    public void SelectRectFillDetected(DeuxClicsEvent e) {
        if (jCheckBoxMenuItemDessinerRectanglePlein.isSelected()) {
            try {
                if (imageRGB != null) {
                    imageRGB.RemplitRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauRGB);
                }
                if (imageNG != null) {
                    imageNG.RemplitRect(e.getX1(), e.getY1(), e.getX2(), e.getY2(), couleurPinceauNG);
                }
            } catch (CImageRGBException ex) {
                System.out.println("Erreur RGB : " + ex.getMessage());
            } catch (CImageNGException ex) {
                System.out.println("Erreur NG : " + ex.getMessage());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupDessiner;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCercle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerCerclePlein;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerLigne;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerPixel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectangle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemDessinerRectanglePlein;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu16;
    private javax.swing.JMenu jMenu17;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuDessiner;
    private javax.swing.JMenu jMenuFiltre;
    private javax.swing.JMenu jMenuFiltre1;
    private javax.swing.JMenu jMenuFiltre2;
    private javax.swing.JMenu jMenuFourier;
    private javax.swing.JMenu jMenuFourierAfficher;
    private javax.swing.JMenu jMenuHistogramme;
    private javax.swing.JMenuItem jMenuHistogrammeAfficher;
    private javax.swing.JMenuItem jMenuHistogrammeAfficherParam;
    private javax.swing.JMenu jMenuImage;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem28;
    private javax.swing.JMenuItem jMenuItem29;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem30;
    private javax.swing.JMenuItem jMenuItem31;
    private javax.swing.JMenuItem jMenuItem32;
    private javax.swing.JMenuItem jMenuItem33;
    private javax.swing.JMenuItem jMenuItem34;
    private javax.swing.JMenuItem jMenuItem35;
    private javax.swing.JMenuItem jMenuItem36;
    private javax.swing.JMenuItem jMenuItem37;
    private javax.swing.JMenuItem jMenuItem38;
    private javax.swing.JMenuItem jMenuItem39;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenuItem jMenuItemCouleurPinceau;
    private javax.swing.JMenuItem jMenuItemEnregistrerSous;
    private javax.swing.JMenuItem jMenuItemFourierAfficherModule;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieImaginaire;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPartieReelle;
    private javax.swing.JMenuItem jMenuItemFourierAfficherPhase;
    private javax.swing.JMenuItem jMenuItemNouvelleNG;
    private javax.swing.JMenuItem jMenuItemNouvelleRGB;
    private javax.swing.JMenuItem jMenuItemOuvrirNG;
    private javax.swing.JMenuItem jMenuItemOuvrirRGB;
    private javax.swing.JMenu jMenuNouvelle;
    private javax.swing.JMenu jMenuOuvrir;
    private javax.swing.JMenuItem jMenuQuitter;
    private javax.swing.JMenuItem jMenuTransfoEgalisation;
    private javax.swing.JMenuItem jMenuTransfoGamma;
    private javax.swing.JMenuItem jMenuTransfoLinSaturation;
    private javax.swing.JMenuItem jMenuTransfoLineaire;
    private javax.swing.JMenuItem jMenuTransfoNegatif;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

}
